{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","Components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","warn","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","toUpperCase","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAqBhD,OACE,sBAAMC,SAba,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAAyBO,OACvCN,EAAc,KAEdO,QAAQC,KAAK,yDAMf,SACE,uBAAOC,KAAK,OAAOC,MAAOX,EAAYY,SAnBhB,SAACT,GACzBF,EAAcE,EAAEU,OAAOF,QAkB8CG,YAAY,iB,+BC1BxEC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAEyBC,UAAUH,GAFnC,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATnB,kBAaZM,GAbY,4CAAH,sDCGPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAEjC,OACE,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJEO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdjB,mBAAS,CACjCwB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkB1C,OAXAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAM,SAAAC,GACHH,EAAS,CACTf,KAAMkB,EACNL,SAAS,SAId,CAACpB,IAEGqB,EDdyBK,CAAa1B,GAA/Ba,EAH2B,EAGhCN,KAAYa,EAHoB,EAGpBA,QAEnB,OAEE,cADA,CACA,sBACE,6BAAKpB,EAAS2B,gBAEbP,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEfNiB,EAAe,WAAM,MAGI7C,mBAAS,CAAC,YAHd,mBAGzB8C,EAHyB,KAGb/C,EAHa,KAKhC,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG+C,EAAWpB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCXxB8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.2fc5c357.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // Function to Input\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  // Function to Form\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Evaluations\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue,...cats]);\n      setInputValue(\"\");\n    } else {\n      console.warn(\"El campo no debe estar vacio o ser mayor a una letra\");\n    }\n  };\n\n  // What this object return?\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} placeholder=\"Buscar...\" />\n    </form>\n  );\n};\n\n// This object required...\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n    const url =\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=LbX2qlkIy7OG1zJNZByCXc1VrTIj7LKR`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images?.downsized_medium.url,\n      };\n    });\n\n    return gifs;\n  };","import React from \"react\";\n\n\nexport const GifGridItem = ({title,url}) => {\n\n  return( \n    <div className='card animate__animated animate__fadeIn'>\n       <img src={url} alt={title} />\n       <p>{title}</p>\n    </div>)\n};\n","import React /* { useState, useEffect } */ from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n\n  // making a request from our hook.\n  const {data:images,loading} = useFetchGifs(category);\n\n  return (\n    // We're returning a fragment\n    <>\n      <h3>{category.toUpperCase()}</h3>\n      {/* Loader */}\n      {loading && <p className=\"animate__animated animate__flash\" >Loading...</p> }\n      {/* Gif container */}\n      <div className='card-flex' >\n        {images.map((img) => (\n          <GifGridItem\n          key={img.id}\n          {...img}\n          />\n          ))}\n      </div>\n          </>\n  );\n};\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({  \n    data: [],\n    loading: true\n})\n\n// This handle changes on our componen.\nuseEffect(() => {\n  getGifs(category)\n    .then( imgs => {\n        setState({\n        data: imgs,\n        loading: false\n      });\n    });\n  \n}, [category])\n\nreturn state;\n}","import React, { useState } from \"react\";\nimport { AddCategory } from \"./AddCategory\";\nimport { GifGrid } from \"./GifGrid\";\n\nexport const GifExpertApp = () => {\n\n  // Default value of search.\n  const [categories, setCategories] = useState([\"puzzles\"]);\n\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./Components/GifExpertApp.js\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}